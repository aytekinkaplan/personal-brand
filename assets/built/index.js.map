{"version":3,"file":"index.js","sources":["../js/infiniteScroll.js","../js/menuOpen.js","../js/index.js","../js/slider.js"],"sourcesContent":["/*\r\nThis script continously loads post as the user scrolls the page. It uses the IntersectionObserver API to detect when the last post is in view. When the last post is in view, it fetches the next page and appends the posts to the page. It then checks if there is a next page and if there is, it continues to observe the last post. If there is no next page, it disconnects the observer. \r\n\r\nImportantly, for this script to work, it requires that each card have the `post` class and that the card container have the `gh-postfeed` class\r\n*/\r\n\r\nlet link = document.querySelector('link[rel=\"next\"]')?.getAttribute(\"href\");\r\n\r\n// Fetch and parse next page\r\nasync function getNextPage(url) {\r\n    try {\r\n        const res = await fetch(url);\r\n\r\n        if (!res.ok) {\r\n            throw new Error(\"Failed to fetch page\");\r\n        }\r\n\r\n        const nextPageHtml = await res.text();\r\n        const parser = new DOMParser();\r\n        const parsed = parser.parseFromString(nextPageHtml, \"text/html\");\r\n        const posts = parsed.querySelectorAll(\".post\");\r\n        const nextLink = parsed\r\n            .querySelector('link[rel=\"next\"]')\r\n            ?.getAttribute(\"href\");\r\n\r\n        return { posts, nextLink };\r\n    } catch (error) {\r\n        throw new Error(error);\r\n    }\r\n}\r\n\r\nexport default function infiniteScroll() {\r\n    if (!link) {\r\n        return;\r\n    }\r\n\r\n    const options = {\r\n        // When the last card is within a 150px of the viewport, fetch the next page. This provides a smoother transition between pages\r\n        rootMargin: \"150px\",\r\n    };\r\n\r\n    const callback = (entries, observer) => {\r\n        try {\r\n            entries.forEach((entry) => {\r\n                if (entry.isIntersecting) {\r\n                    if (link) {\r\n                        getNextPage(link).then(({ posts, nextLink }) => {\r\n                            posts.forEach((post) => {\r\n                                document\r\n                                    .querySelector(\".gh-postfeed\")\r\n                                    .append(post);\r\n                            });\r\n\r\n                            if (nextLink) {\r\n                                link = nextLink;\r\n                                observer.observe(\r\n                                    document.querySelector(\".post:last-of-type\")\r\n                                );\r\n                            } else {\r\n                                observer.disconnect();\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    let observer = new IntersectionObserver(callback, options);\r\n\r\n    observer.observe(document.querySelector(\".post:last-of-type\"));\r\n}\r\n","// Toggle the menu open and close when on mobile\r\nexport default function menuOpen() {\r\n    const burgerButton = document.querySelector(\".gh-burger\");\r\n    burgerButton.addEventListener(\"click\", function () {\r\n        document.body.classList.toggle(\"gh-head-open\");\r\n    });\r\n}\r\n","// Import JS\r\nimport menuOpen from \"./menuOpen\";\r\nimport infiniteScroll from \"./infiniteScroll\";\r\nimport { initSliders } from \"./slider\"; // Güncellenmiş slider fonksiyonunu import ettik\r\n\r\n// Call the menu, infinite scroll, and slider functions\r\nmenuOpen();\r\ninfiniteScroll();\r\ninitSliders(); // Çoklu slider fonksiyonunu başlat\r\n","export function initSliders() {\r\n    document.addEventListener(\"DOMContentLoaded\", () => {\r\n        // Select all sliders on the page\r\n        const sliders = document.querySelectorAll(\".gh-slider\");\r\n\r\n        if (sliders.length === 0) {\r\n            console.error(\"No sliders found on the page.\");\r\n            return;\r\n        }\r\n\r\n        sliders.forEach((slider) => {\r\n            // Get the navigation buttons\r\n            const prevBtn = slider\r\n                .closest(\".gh-postfeed-slider\")\r\n                .querySelector(\".prev-btn\");\r\n            const nextBtn = slider\r\n                .closest(\".gh-postfeed-slider\")\r\n                .querySelector(\".next-btn\");\r\n            const sliderItems = Array.from(\r\n                slider.querySelectorAll(\".gh-slider-item\")\r\n            );\r\n\r\n            if (!slider || sliderItems.length === 0) return;\r\n\r\n            // Configuration\r\n            let itemsVisible = calculateVisibleItems(); // Calculate visible items based on screen width\r\n            let itemWidth = 100 / itemsVisible;\r\n            const totalItems = sliderItems.length;\r\n            let currentIndex = 0;\r\n            let autoSlideInterval;\r\n\r\n            // Ensure the latest items are displayed on page load\r\n            currentIndex = Math.max(0, totalItems - itemsVisible);\r\n\r\n            // Set item width for all items\r\n            sliderItems.forEach((item) => {\r\n                item.style.width = `${itemWidth}%`;\r\n                slider.appendChild(item);\r\n            });\r\n\r\n            updateSlider();\r\n\r\n            // Event listeners for buttons\r\n            nextBtn.addEventListener(\"click\", moveNext);\r\n            prevBtn.addEventListener(\"click\", movePrev);\r\n            window.addEventListener(\"resize\", handleResize); // Adjust on resize\r\n            addSwipeEvents(slider);\r\n            addKeyboardNavigation();\r\n\r\n            function moveNext() {\r\n                if (currentIndex < totalItems - itemsVisible) {\r\n                    currentIndex++;\r\n                    updateSlider();\r\n                } else {\r\n                    currentIndex = 0; // Go back to the first item for infinite loop\r\n                    updateSlider();\r\n                }\r\n            }\r\n\r\n            function movePrev() {\r\n                if (currentIndex > 0) {\r\n                    currentIndex--;\r\n                    updateSlider();\r\n                } else {\r\n                    currentIndex = totalItems - itemsVisible; // Go to the last item\r\n                    updateSlider();\r\n                }\r\n            }\r\n\r\n            function updateSlider() {\r\n                const offset = currentIndex * itemWidth;\r\n                slider.style.transform = `translateX(-${offset}%)`;\r\n                slider.style.transition = \"transform 0.6s ease-in-out\";\r\n\r\n                // Update button visibility based on position\r\n                prevBtn.style.display = currentIndex === 0 ? \"none\" : \"flex\";\r\n                nextBtn.style.display =\r\n                    currentIndex >= totalItems - itemsVisible ? \"none\" : \"flex\";\r\n            }\r\n\r\n            function handleResize() {\r\n                itemsVisible = calculateVisibleItems();\r\n                itemWidth = 100 / itemsVisible;\r\n                sliderItems.forEach(\r\n                    (item) => (item.style.width = `${itemWidth}%`)\r\n                );\r\n                updateSlider();\r\n            }\r\n\r\n            function calculateVisibleItems() {\r\n                const containerWidth = slider.clientWidth;\r\n                if (containerWidth >= 1200) return 3; // Show 3 items on large screens\r\n                if (containerWidth >= 768) return 2; // Show 2 items on medium screens\r\n                return 1; // Show 1 item on small screens\r\n            }\r\n\r\n            function addSwipeEvents(sliderElement) {\r\n                let startX = 0;\r\n                let isDragging = false;\r\n\r\n                sliderElement.addEventListener(\"touchstart\", (e) => {\r\n                    startX = e.touches[0].clientX;\r\n                    isDragging = true;\r\n                });\r\n\r\n                sliderElement.addEventListener(\"touchmove\", (e) => {\r\n                    if (!isDragging) return;\r\n                    const touchX = e.touches[0].clientX;\r\n                    const diffX = startX - touchX;\r\n                    const translateX =\r\n                        -(currentIndex * slider.clientWidth) - diffX;\r\n                    slider.style.transform = `translateX(${translateX}px)`;\r\n                });\r\n\r\n                sliderElement.addEventListener(\"touchend\", (e) => {\r\n                    isDragging = false;\r\n                    const endX = e.changedTouches[0].clientX;\r\n                    const threshold = 50;\r\n\r\n                    if (startX - endX > threshold) moveNext();\r\n                    else if (endX - startX > threshold) movePrev();\r\n                    else updateSlider();\r\n                });\r\n            }\r\n\r\n            function addKeyboardNavigation() {\r\n                document.addEventListener(\"keydown\", (e) => {\r\n                    if (e.key === \"ArrowLeft\") movePrev();\r\n                    if (e.key === \"ArrowRight\") moveNext();\r\n                });\r\n            }\r\n        });\r\n    });\r\n}\r\n"],"names":["link","document","querySelector","getAttribute","addEventListener","body","classList","toggle","IntersectionObserver","callback","entries","observer","forEach","entry","isIntersecting","async","url","res","fetch","ok","Error","nextPageHtml","text","parsed","DOMParser","parseFromString","posts","querySelectorAll","nextLink","error","getNextPage","then","_ref","post","append","observe","disconnect","console","log","rootMargin","infiniteScroll","sliders","length","slider","prevBtn","closest","nextBtn","sliderItems","Array","from","itemsVisible","calculateVisibleItems","itemWidth","totalItems","currentIndex","moveNext","updateSlider","movePrev","offset","style","transform","transition","display","containerWidth","clientWidth","Math","max","item","width","appendChild","window","sliderElement","startX","isDragging","e","touches","clientX","touchX","diffX","translateX","endX","changedTouches","addSwipeEvents","key"],"mappings":"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"}